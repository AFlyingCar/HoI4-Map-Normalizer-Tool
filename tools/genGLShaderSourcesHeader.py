#!/usr/bin/env python3

import os
import sys
import datetime

gl_shader_sources_hdr = open(f"{sys.argv[2]}/GLShaderSources.h", 'w')

glsl_sources = {}
for glsl_file in os.listdir(sys.argv[1]):
    if os.path.isfile(f"{sys.argv[1]}/{glsl_file}") and glsl_file.endswith(".glsl"):
        print(f"Found GLSL source '{glsl_file}'")
        glsl_sources[glsl_file] = open(f"{sys.argv[1]}/{glsl_file}", 'r').read().strip()

gl_shader_sources_hdr.write( "/**\n")
gl_shader_sources_hdr.write( " * @file GLShaderSources.h\n")
gl_shader_sources_hdr.write( " *\n")
gl_shader_sources_hdr.write(f" * @brief This file was autogenerated on {datetime.datetime.now()}\n")
gl_shader_sources_hdr.write( " *        manual changes will not be tracked.\n")
gl_shader_sources_hdr.write( " *\n")
gl_shader_sources_hdr.write( " */\n\n")

gl_shader_sources_hdr.write( "#ifndef GL_SHADER_SOURCES_H\n")
gl_shader_sources_hdr.write( "# define GL_SHADER_SOURCES_H\n\n")

gl_shader_sources_hdr.write( "# include <string>\n\n")

gl_shader_sources_hdr.write( "namespace HMDT::GUI::GL::ShaderSources {\n")

for filename, contents in glsl_sources.items():
    gl_shader_sources_hdr.write(f"const std::string {os.path.splitext(filename)[0]} = R\"(\n{contents}\n)\";\n\n")

gl_shader_sources_hdr.write( "}\n")

gl_shader_sources_hdr.write( "\n#endif\n")

