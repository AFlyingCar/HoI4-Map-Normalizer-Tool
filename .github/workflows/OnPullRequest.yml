name: Linux

on: [pull_request, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
          lfs: true

    - name: Checkout all LFS objects
      run: git lfs checkout

    - name: Install required dependencies
      # We need the following dependencies in order to compile
      run: sudo apt-get update && sudo apt-get -y install clang-12 python3.6 libgtkmm-3.0-dev libglew-dev libopengl0 libglm-dev valgrind

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: CXX=clang++-12 cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: CXX=clang++-12 cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ${{github.workspace}}/bin/unit_tests

    - name: Test With Valgrind
      if: failure() || success()
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: valgrind ${{github.workspace}}/bin/unit_tests

    - name: Generate Result Packages
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --target package

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      if: ${{github.event_name == 'pull_request'}}
      with:
          name: ${{github.workflow}}
          path: |
              ${{github.workspace}}/bin/packages/*
              !${{github.workspace}}/bin/packages/_CPack_Packages

          retention-days: 5

